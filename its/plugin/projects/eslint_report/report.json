[
  {
    "filePath": "src/file.js",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'addOne' is defined but never used.",
        "line": 1,
        "column": 10,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 1,
        "endColumn": 16
      },
      {
        "ruleId": "use-isnan",
        "severity": 2,
        "message": "Use the isNaN function to compare with NaN.",
        "line": 2,
        "column": 7,
        "nodeType": "BinaryExpression",
        "messageId": "comparisonWithNaN",
        "endLine": 2,
        "endColumn": 15
      },
      {
        "ruleId": "semi",
        "severity": 2,
        "message": "Missing semicolon.",
        "line": 3,
        "column": 18,
        "nodeType": "ReturnStatement",
        "messageId": "missingSemi",
        "endLine": 4,
        "endColumn": 1,
        "fix": {
          "range": [
            56,
            56
          ],
          "text": ";"
        }
      },
      {
        "ruleId": "semi",
        "severity": 2,
        "message": "Missing semicolon.",
        "line": 5,
        "column": 11,
        "nodeType": "ReturnStatement",
        "messageId": "missingSemi",
        "endLine": 6,
        "endColumn": 1,
        "fix": {
          "range": [
            78,
            78
          ],
          "text": ";"
        }
      },
      {
        "ruleId": "no-extra-semi",
        "severity": 2,
        "message": "Unnecessary semicolon.",
        "line": 7,
        "column": 2,
        "nodeType": "EmptyStatement",
        "messageId": "unexpected",
        "endLine": 7,
        "endColumn": 3,
        "fix": {
          "range": [
            83,
            85
          ],
          "text": "}"
        }
      }
    ],
    "suppressedMessages": [],
    "errorCount": 5,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 3,
    "fixableWarningCount": 0,
    "source": "function addOne(i) {\n  if (i != NaN) {\n      return i ++\n  } else {\n    return\n  }\n};\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "src/file.ts",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'addOne' is defined but never used.",
        "line": 1,
        "column": 10,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 1,
        "endColumn": 16
      },
      {
        "ruleId": "use-isnan",
        "severity": 2,
        "message": "Use the isNaN function to compare with NaN.",
        "line": 2,
        "column": 7,
        "nodeType": "BinaryExpression",
        "messageId": "comparisonWithNaN",
        "endLine": 2,
        "endColumn": 15
      },
      {
        "ruleId": "semi",
        "severity": 2,
        "message": "Missing semicolon.",
        "line": 3,
        "column": 16,
        "nodeType": "ReturnStatement",
        "messageId": "missingSemi",
        "endLine": 4,
        "endColumn": 1,
        "fix": {
          "range": [
            62,
            62
          ],
          "text": ";"
        }
      },
      {
        "ruleId": "semi",
        "severity": 2,
        "message": "Missing semicolon.",
        "line": 5,
        "column": 11,
        "nodeType": "ReturnStatement",
        "messageId": "missingSemi",
        "endLine": 6,
        "endColumn": 1,
        "fix": {
          "range": [
            84,
            84
          ],
          "text": ";"
        }
      },
      {
        "ruleId": "no-extra-semi",
        "severity": 2,
        "message": "Unnecessary semicolon.",
        "line": 7,
        "column": 2,
        "nodeType": "EmptyStatement",
        "messageId": "unexpected",
        "endLine": 7,
        "endColumn": 3,
        "fix": {
          "range": [
            89,
            91
          ],
          "text": "}"
        }
      }
    ],
    "suppressedMessages": [],
    "errorCount": 5,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 3,
    "fixableWarningCount": 0,
    "source": "function addOne(i: number) {\n  if (i != NaN) {\n    return i ++\n  } else {\n    return\n  }\n};",
    "usedDeprecatedRules": []
  }
]